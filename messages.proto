syntax = "proto3";

package myPackage;

message PingMessage {
  int64 clientTimestamp = 1;
  int64 serverTimestamp = 2;
}

message PongMessage {
  int64 clientTimestamp = 1;
  int64 serverTimestamp = 2;
  bool isMasterClock = 3;
}

message EstablishSessionRequest {
  string application = 1;
  string version = 2;
  string authenticationToken = 3;
  int64 clientTimestamp = 4;
}

message EstablishSessionResponse {
  bool success = 1;
  ErrorCode error = 2;
  int64 clientTimestamp = 3;
  int64 masterTimestamp = 4;
  AccountInfo account = 5;
  CharacterInfo character = 6;
}

message AccountInfo {
  int64 accountId = 1;
  string email = 2;
  int64 createdAt = 3;
  int64 bannedUntil = 4;
}

message CharacterInfo {
  int64 characterId = 1;
  string name = 2;
  int64 createdTimestamp = 3;
  repeated CharacterAppearance appearance = 4;
}

message CharacterAppearance {
  CharacterAppearancePart part = 1;
  int64 value = 2;
}

enum CharacterAppearancePart {
		None = 0;
		Hat = 1;
		Hair = 2;
		Eyes = 3;
		Jacket = 4;
		Shirt = 5;
		Back = 6;
		Pants = 7;
		Shoes = 8;
		Skin  = 9;
}

message WrappedEntityState {
  EntityType type = 1;
  bytes data = 2;
}

message CharacterLoadoutUpdatedEvent {
  int64 characterLoadoutId = 1;
  repeated int32 items = 2;
}

message CharacterAppearanceUpdatedEvent {
    int64 characterId = 1;
    repeated CharacterAppearance appearance = 2;
}

message PlayerState {
  Vector2 position = 1;
  FacingDirection facingDirection = 2;
  int64 dataId = 3;
  MoveType moveType = 4;
  int64 gameSessionId = 5;
  int64 accountId = 6;
  int64 characterId = 7;
  string displayName = 8;
  repeated CharacterAppearance appearance = 9;
  int32 danceIndex = 10;
  int32 timeToLive = 11;
  int64 lastKeepAlive = 12;
  int64 lastMove = 13;
  int64 lastTeleport = 14;
  int64 lastChannelUpdate = 15;
  int64 lastAppearanceUpdate = 16;
}

message Vector2 {
  float x = 1;
  float y = 2;
}

message ChannelInfo {
  int32 channelId = 1;
  int32 population = 2;
}

message GetChannelsResponse {
  ChannelInfo channelInfo = 1;
}

message UpdateChannelRequest {
  int32 channelId = 1;
}

message UpdateChannelResponse {
  bool success = 1;
  ErrorCode error = 2;
}

message SubscribedToChannelEvent {
  int32 channelId = 1;
  string name = 2;
  ChannelType type = 3;
  int64 createdAt = 4;
  int32 channelFlags = 5;
  int32 subscriptionFlags = 6;
  repeated ChannelSubscriber subscribers = 7;
  repeated ChannelMessage history = 8;
  repeated ChannelMessage unacknowledged = 9;
}

message SendMessageToChannelRequest {
  int64 requestId = 1;
  int64 channelId = 2;
  string body = 3;
  bool action = 4;
}

message ChannelMessageSentEvent {
  int64 requestId = 1;
  int64 messageId = 2;
  int64 sentAt = 3;
}

message ChannelMessageEvent {
  int64 channelId = 1;
  ChannelMessage message = 2;
}


message AcknowledgeChannelMessageRequest {
  int64 messageId = 1;
}

message ChannelMessageAcknowledgedEvent {
  int64 messageId = 1;
}


message ChannelSubscriber {
  int64 subscriberId = 1;
  string name = 2;
}

message ChannelMessage {
  int64 messageId = 1;
  int64 sentAt = 2;
  ChannelSubscriber sender = 3;
  string body = 4;
  bool action = 5;
}


message GameSessionOpenedEvent {
  int64 accountId = 1;
  int64 characterId = 2;
  int64 entityId = 3;
  WrappedEntityState wrappedEntityState = 4;
  int32 channelId = 5;
  int32 mapId = 6;
}

enum EntityType {
  ENTITY_TYPE_NONE = 0;
  ENTITY_TYPE_GENERIC = 1;
  ENTITY_TYPE_INTERACTABLE = 2;
  ENTITY_TYPE_OCCUPIABLE = 3;
  ENTITY_TYPE_MOBILE = 4;
  ENTITY_TYPE_PLAYER = 5;
  ENTITY_TYPE_NPC = 6;
  ENTITY_TYPE_PORTAL = 7;
  ENTITY_TYPE_DOOR = 8;
  ENTITY_TYPE_COLLECTABLE = 9;
  ENTITY_TYPE_DJBOOTH = 10;
}

enum ChannelType {
  CHANNEL_TYPE_NONE = 0;
  CHANNEL_TYPE_LOCAL = 1;
  CHANNEL_TYPE_ZONE = 2;
  CHANNEL_TYPE_GLOBAL = 3;
  CHANNEL_TYPE_DIRECT = 4;
  CHANNEL_TYPE_GROUP = 5;
  CHANNEL_TYPE_PARTY = 6;
  CHANNEL_TYPE_LOBBY = 7;
  CHANNEL_TYPE_TEAM = 8;
  CHANNEL_TYPE_COMMUNITY = 9;
}

enum ErrorCode {
  Undefined = 0;
  ApplicationInvalid = 1;
  ApplicationOutOfDate = 2;
  AuthenticationTokenInvalid = 3;
  AccountBanned = 4;
  MaintenanceActive = 5;
  AccountInUse = 6;
  CharacterInUse = 7;
}

enum FacingDirection {
  FACING_DIRECTION_NONE = 0;
  FACING_DIRECTION_NORTH = 1;
  FACING_DIRECTION_SOUTH = 2;
  FACING_DIRECTION_EAST = 3;
  FACING_DIRECTION_WEST = 4;
}

enum MoveType {
  MOVE_TYPE_NONE = 0;
  MOVE_TYPE_WALK = 1;
  MOVE_TYPE_SPRINT = 2;
}
